index_title=ZFS Manager
index_root=The root directory is $1.
index_version=alpha 0.1.5
index_return=pool list
snapshot_return=snapshot list
zfs_return=file system list

#general use
destination=Destination:
filename=Filename:
continue=Continue
create=Create
destroy=Destroy

#tasks
tasks=Tasks
differences=Differences:
differences_desc=Show differences in
rename=Rename:
rename_desc=Rename
clone=Clone:
clone_desc: Clone
destroy=Destroy:
destroy_pool=Destroy pool
destroy_filesystem=Destroy filesystem
destroy_snap=Destroy snapshot
snapshot=Snapshot:
snapshot_desc=Create new snapshot based on filesystem:
send=Send:
send_desc=Send
rollback=Rollback:
rollback_desc=Rollback

status_title=Zpool Status

vdev_title=Manage Virtual Device
property_title=Manage Property
select_title=Select a device for new vdev
replace_title=Replace a device
diff_title=Snapshot Differences

about_title=About ZFS Manager

cmd_title=Issuing Command
cmd_dscpt=Command Description:
cmd_issue=Commands to be issued:
cmd_results=Results from commands:
cmd_with=with command...
cmd_setzfs=Attempting to set zfs property
cmd_setpool=Attempting to set pool property
cmd_snapshot=Attempting to create snapshot
cmd_send=Send snapshot
cmd_gzip=to gzip file
cmd_createzfs=Attempting to create filesystem
cmd_clone=Attempting to clone
cmd_rename=Attempting to rename
cmd_createzpool=Attempting to create pool
cmd_vdev=Attempting to 
cmd_promote=Attempting to promote
cmd_scrub=Attempting to scrub pool
cmd_upgrade=Attempting to upgrade pool
cmd_export=Attempting to export pool
cmd_import=Attempting to import pool
cmd_zfsact=Attempting to 
cmd_destroy=Attempting to destroy
cmd_affect=This action will affect the following:
cmd_warning=Warning, this action will result in data loss, do you really want to continue?
cmd_understand=I understand
cmd_checkbox=checkbox must be selected
cmd_multisnap=Attempting to destroy multiple snapshots...
cmd_success=Success!
cmd_error=error:

snapshot_title=Snapshot 
snapshot_create=Create Snapshot
snapshot_new=Select filesystem for snapshot

zpool_upgrade_msg=This will enable all available features, many of which cannot be disabled again. See zpool-features in man pages for more information. *Avoid using if pool needs to retain backwards compatibilty.*

promote_cmd=zfs promote <u>clone-filesystem</u>
promote_desc=Promotes a clone file system to no longer be dependent on its "origin" snapshot. This makes it possible to destroy the file system that the clone was created from. The clone parent-child dependency relationship is reversed, so that the origin file system becomes a clone of the specified file system. <br /><br /> The snapshot that was cloned, and any snapshots previous to this snapshot, are now owned by the promoted clone. The space they use moves from the origin file system to the promoted clone, so enough space must be available to accommodate these snapshots. No new space is consumed by this operation, but the space accounting is adjusted. The promoted clone must not have any conflicting snapshot names of its own. The rename subcommand can be used to rename any conflicting snapshots.

clone_cmd=zfs clone [-p] [-o <u>property</u>=<u>value</u>] ... snapshot <u>filesystem</u>|<u>volume</u>
clone_desc=Creates a clone of the given snapshot. See the "Clones" section for details. The target dataset can be located anywhere in the ZFS hierarchy, and is created as the same type as the original.<br /><br />-p<br />Creates all the non-existing parent datasets. Datasets created in this manner are automatically mounted according to the mountpoint property inherited from their parent. If the target  filesystem  or  volume  already exists, the operation completes successfully.<br /><br />-o <u>property</u>=<u>value</u><br /> Sets the specified property; see zfs create for details.

export_cmd=zpool export [-a] [-f] <u>pool</u> ...
export_desc=Exports the given pools from the system. All devices are marked as exported, but are still considered in use by other subsystems. The devices can be moved between systems (even those of different endianness) and imported as long as a sufficient number of devices are present.<br /><br />Before exporting the pool, all datasets within the pool are unmounted. A pool can not be exported if it has a shared spare that is currently being used.<br /><br />For pools to be portable, you must give the zpool command whole disks, not just partitions, so that ZFS can label the disks with portable EFI labels. Otherwise, disk drivers on platforms of different endianness will not recognize the disks.<br /><br />-a    Exports all pools imported on the system.<br /><br />-f    Forcefully unmount all datasets, using the "unmount -f" command. <br /><br />This command will forcefully export the pool even if it has a shared spare that is currently being used. This may lead to potential data corruption.<br /><br />

#universal property descriptions
>
prop_guid=A unique identifier for the pool or filesystem.<br /><br />The 64 bit GUID of a dataset or bookmark does not change over its entire lifetime. When a snapshot is sent to another pool, the received snapshot has the same GUID. Thus, the guid is suitable to identify a snapshot across pools.

#zfs property descriptions
prop_aclinherit=Controls how ACL entries are inherited when files and directories are created. A file system with an "aclinherit" property of "discard" does not inherit any ACL entries. A file system with an "aclinherit" property value of "noallow" only inherits inheritable ACL entries that specify "deny" permissions. The property value "restricted" (the default) removes the "write_acl" and "write_owner" permissions when the ACL entry is inherited. A file system with an "aclinherit" property value of "passthrough" inherits all inheritable ACL entries without any modifications made to the ACL entries when they are inherited. A file system with an "aclinherit" property value of "passthrough-x" has the same meaning as "passthrough", except that the owner@, group@, and everyone@ ACEs inherit the execute permission only if the file creation mode also requests the execute bit. When the property value is set to "passthrough," files are created with a mode determined by the inheritable ACEs. If no inheritable ACEs exist that affect the mode, then the mode is set in accordance to the requested mode from the application.
prop_aclmode=Controls how an ACL is modified during chmod(2). A file system with an "aclmode" property of "discard" deletes all ACL entries that do not represent the mode  of  the  file.  An  "aclmode"  property  of "groupmask"  (the  default)  reduces user or group permissions. The permissions are reduced, such that they are  no  greater  than  the group  permission bits, unless it is a user entry that has the same UID as the owner of the file or directory. In this  case,  the  ACL permissions are reduced so that they are no greater than owner permission  bits.  A  file  system  with  an  "aclmode"  property   of "passthrough"  indicates  that no changes are made to the ACL other than generating the necessary ACL entries to represent the new mode of the file or directory.
prop_acltype=Controls whether ACLs are enabled and if so what type of ACL to use. When a file system has the acltype property set to noacl (the default) then ACLs are disabled. Setting the acltype property to posixacl indicates Posix ACLs should be used. Posix ACLs are specific to Linux and are not functional on other platforms. Posix ACLs are stored as an xattr and therefore will not overwrite any existing ZFS/NFSv4 ACLs which may be set. Currently only posixacls are supported on Linux.<br /><br />To obtain the best performance when setting posixacl users are strongly encouraged to set the xattr=sa property. This will result in the Posix ACL being stored more efficiently on disk. But as a consequence of this all new xattrs will only be accessable from ZFS implementations which support the xattr=sa property. See the xattr property for more details.
prop_atime=Controls whether the access time for files is updated when they are read. Turning this property off avoids producing write traffic when reading files and can result in significant performance gains, though it might confuse mailers and other similar utilities. The default value is "on".
prop_available=The amount of space available to the dataset and all its children, assuming that there is no other activity in the pool. Because space is shared within a pool, availability can be limited by any number of factors, including physical pool size, quotas, reservations, or other datasets within the pool. This property can also be referred to by its shortened column name, "avail".
prop_canmount=If this property is set to "off", the file system cannot be mounted, and is ignored by "zfs mount -a". Setting this property to "off" is similar to setting the "mountpoint" property to "none", except that the dataset still has a normal "mountpoint" property, which can be inherited. Setting this property to "off" allows datasets to be used solely as a mechanism to inherit properties. One example of setting canmount=off is to have two datasets with the same mountpoint, so that the children of both datasets	appear in the same directory, but might have different inherited characteristics.<br /><br />When the "noauto" option is set, a dataset can only be mounted and unmounted explicitly. The dataset is not mounted automatically when the dataset is created or imported, nor is it mounted by the "zfs mount -a" command or unmounted by the "zfs unmount -a" command.<br /><br />This property is not inherited.
prop_casesensitivity=Indicates whether the file name matching algorithm used by the file system should be case-sensitive, case-insensitive, or allow a combination of both styles of matching. The default value for the casesensitivity property is sensitive. Traditionally, UNIX and POSIX file systems have case-sensitive file names.<br /><br />The mixed value for the casesensitivity property indicates that the file system can support requests for both case-sensitive and case-insensitive matching behavior. Currently, case-insensitive matching behavior on a file system that supports mixed behavior is limited to the Solaris CIFS server product. For more information about the mixed value behavior, see the Solaris ZFS Administration Guide.
prop_checksum=Controls the checksum used to verify data integrity. The default value is "on", which automatically selects an appropriate algorithm (currently, fletcher2, but this may change in future releases). The value "off" disables integrity checking on user data. Disabling checksums is NOT a recommended practice.
prop_clones=A clone is a writable volume or file system whose initial contents are the same as another dataset. As with snapshots, creating a clone is nearly instantaneous, and initially consumes no additional space. Clones can only be created from a snapshot. When a snapshot is cloned, it creates an implicit dependency between the parent and child. Even though the clone is created somewhere else in the dataset hierarchy, the original snapshot cannot be destroyed as long as a clone exists. The origin property exposes this dependency, and the destroy command lists any such dependencies, if they exist.<br /><br /> The clone parent-child dependency relationship can be reversed by using the promote subcommand. This causes the "origin" file system to become a clone of the specified file system, which makes it possible to destroy the file system that the clone was created from.
prop_com.sun:auto-snapshot=zfs-auto-snapshot automatically creates, rotates, and destroys snapshots for all your ZFS datasets, and is compatible with both zfsonlinux and zfs-fuse. 
prop_compression=Controls the compression algorithm used for this dataset. The "lzjb" compression algorithm is optimized for performance while providing decent data compression. Setting compression to "on" uses the "lzjb" compression algorithm. The "gzip" compression algorithm uses the same compression as the gzip(1) command. You can specify the "gzip" level by using the value "gzip-N" where N is an integer from 1 (fastest) to 9 (best compression ratio). Currently, "gzip" is equivalent to "gzip-6" (which is also the default for gzip(1)). This property can also be referred to by its shortened column name "compress".
prop_compressratio=The compression ratio achieved for this dataset, expressed as a multiplier. Compression can be turned on by running "zfs set compression=on dataset". The default value is "off".
prop_context=This flag sets the SELinux context for all files in the filesytem under the mountpoint for that filesystem. See selinux(8) for more information.
prop_copies=Controls the number of copies of data stored for this dataset. These copies are in addition to any redundancy provided by the pool, for example, mirroring or raid-z. The copies are stored on different disks, if possible. The space used by multiple copies is charged to the associated file and dataset, changing the "used" property and counting against quotas and reservations.<br /><br /> Changing this property only affects newly-written data. Therefore, set this property at file system creation time by using the "-o copies=" option.
prop_creation=The time this dataset was created.
prop_createtxg=The transaction group (txg) in which the dataset was created. Bookmarks have the same createtxg as the snapshot they are initially tied to. This property is suitable for ordering a list of snapshots, e.g. for incremental send and receive.
prop_dedup=Configures deduplication for a dataset. The default value is off. The default deduplication checksum is sha256 (this may change in the future). When dedup is enabled, the checksum defined here overrides the checksum property. Setting the value to verify has the same effect as the setting sha256,verify. If set to verify, ZFS will do a byte-to-byte comparsion in case of two blocks having the same signature to make sure the block contents are identical.
prop_defcontext=This flag sets the SELinux context for unlabeled files.  See selinux(8) for more information.
prop_devices=Controls whether device nodes can be opened on this file system. The default value is "on".
prop_dnodesize=Specifies a compatibility mode or literal value for the size of dnodes in the file system. The default value is legacy.  Setting this property to a value other than legacy requires the large_dnode pool feature to be enabled.<br /><br />Consider setting dnodesize to auto if the dataset uses the xattr=sa property setting and the workload makes heavy use of extended attributes. This may be applicable to SELinux-enabled systems, Lustre servers, and Samba servers, for example. Literal values are supported for cases where the optimal size is known in advance and for performance testing.<br /><br />Leave dnodesize set to legacy if you need to receive a send stream of this dataset on a pool that doesn't enable the large_dnode feature, or if you need to import this pool on a system that doesn't support the large_dnode feature.<br /><br />This property can also be referred to by its shortened column name, dnsize.
prop_encryption=Controls the encryption cipher suite (block cipher, key length, and mode) used for this dataset. Requires the encryption feature to be enabled on the pool.  Requires a keyformat to be set at dataset creation time.<br /><br />Selecting encryption=on when creating a dataset indicates that the default encryption suite will be selected, which is currently aes-256-gcm.  In order to provide consistent data protection, encryption must be specified at dataset creation time and it cannot be changed afterwards.<br /><br />For more details and caveats about encryption see the Encryption section of zfs-load-key(8).
prop_exec=Controls whether processes can be executed from  within  this  file system. The default value is "on".
prop_filesystem_count=The total number of filesystems and volumes that exist under this location in the dataset tree. This value is only available when a filesystem_limit has been set somewhere in the tree under which the dataset resides.
prop_filesystem_limit=Limits the number of filesystems and volumes that can exist under this point in the dataset tree. The limit is not enforced if the user is allowed to change the limit. Setting a filesystem_limit on a descendent of a filesystem that already has a filesystem_limit does not override the ancestor\'s filesystem_limit, but rather imposes an additional limit. This feature must be enabled to be used (see zpool-features(5)).
prop_fscontext=This flag sets the SELinux context for the filesytem being mounted. See selinux(8) for more information.
prop_keyformat=Controls what format the user\'s encryption key will be provided as. This property is only set when the dataset is encrypted.<br /><br />Raw keys and hex keys must be 32 bytes long (regardless of the chosen encryption suite) and must be randomly generated. A raw key can be generated with the following command:<br /><br />\# dd if=/dev/urandom of=/path/to/output/key bs=32 count=1<br /><br />Passphrases must be between 8 and 512 bytes long and will be processed through PBKDF2 before being used (see the pbkdf2iters property). Even though the encryption suite cannot be changed after dataset creation, the keyformat can be with zfs change-key.
prop_keylocation=Controls where the user's encryption key will be loaded from by default for commands such as zfs load-key and zfs mount -l.  This property is only set for encrypted datasets which are encryption roots. If unspecified, the default is prompt.<br /><br />Even though the encryption suite cannot be changed after dataset creation, the keylocation can be with either zfs set or zfs change-key. If prompt is selected ZFS will ask for the key at the command prompt when it is required to access the encrypted data (see zfs load-key for details). This setting will also allow the key to be passed in via STDIN, but users should be careful not to place keys which should be kept secret on the command line. If a file URI is selected, the key will be loaded from the specified absolute file path.
prop_keystatus=Indicates if an encryption key is currently loaded into ZFS. The possible values are none, available, and unavailable. See zfs load-key and zfs unload-key.
prop_logbias=Provide a hint to ZFS about handling of synchronous requests in this dataset. If logbias is set to latency (the default), ZFS will use pool log devices (if configured) to handle the requests at low latency. If logbias is set to throughput, ZFS will not use configured pool log devices. ZFS will instead optimize synchronous operations for global pool throughput and efficient use of resources.
prop_logicalused=The amount of space that is "logically" accessible by this dataset. See the referenced property. The logical space ignores the effect of the compression and copies properties, giving a quantity closer to the amount of data that applications see. However, it does include space consumed by metadata.<br /><br /> This property can also be referred to by its shortened column name, lrefer.
prop_logicalreferenced=The amount of space that is "logically" accessible by this dataset. See the referenced property. The logical space ignores the effect of the compression and copies properties, giving a quantity closer to the amount of data that applications see. However, it does include space consumed by metadata.<br /><br />This property can also be referred to by its shortened column name, lrefer.
prop_mlslabel=The mlslabel property is a sensitivity label that determines if a dataset  can be mounted in a zone on a system with Trusted Extensions enabled. If the labeled dataset matches the labeled zone, the dataset can be mounted and accessed from the labeled zone.<br /><br />When the mlslabel property is not set, the default value is none. Setting the mlslabel property to none is equivalent to removing the property.<br /><br />The mlslabel property can be modified only when Trusted Extensions is enabled and only with appropriate privilege. Rights to modify it cannot be delegated. When changing a label to a higher label or setting the initial dataset label, the {PRIV_FILE_UPGRADE_SL} privilege is required. When changing a label to a lower label or the default (none), the {PRIV_FILE_DOWNGRADE_SL} privilege is required. Changing the dataset to labels other than the default can be done only when the dataset is not mounted. When a dataset with the default label is mounted into a labeled-zone, the mount operation automatically sets the mlslabel property to the label of that zone.<br /><br /> When Trusted Extensions is not enabled, only datasets with the default label (none) can be mounted.<br /><br /> Zones are a Solaris feature and are not relevant on Linux.
prop_mounted=For file systems, indicates whether the file system is currently mounted. This property can be either yes or no.
prop_mountpoint=Controls the mount point used for this file system. See the "Mount Points" section for more information on how this property is used.<br /><br />When the mountpoint property is changed for a file system, the file system and any children that inherit the mount point are unmounted. If the new value is legacy, then they remain unmounted. Otherwise, they are automatically remounted in the new location if the property was previously legacy or none, or if they were mounted before the property was changed. In addition, any shared file systems are unshared and shared in the new location.
prop_normalization=Indicates whether the file system should perform a unicode normalization of file names whenever two file names are compared, and which normalization algorithm should be used. File names are always stored unmodified, names are normalized as part of any comparison process. If this property is set to a legal value other than none, and the utf8only property was left unspecified, the utf8only property is automatically set to on. The default value of the normalization property is none. This property cannot be changed after the file system is created.
prop_nbmand=Controls whether the file system should be mounted with nbmand (Non Blocking mandatory locks). This is used for SMB clients. Changes to this property only take effect when the file system is umounted and remounted.  See mount(8) for more information on nbmand mounts. This property is not used on Linux.
prop_objsetid=A unique identifier for this dataset within the pool. Unlike the dataset\'s guid, the objsetid of a dataset is not transferred to other pools when the snapshot is copied with a send/receive operation. The objsetid can be reused (for a new dataset) after the dataset is deleted.
prop_overlay=Allow mounting on a busy directory or a directory which already contains files or directories. This is the default mount behavior for Linux and FreeBSD file systems. On these platforms the property is on by default. Set to off to disable overlay mounts for consistency with OpenZFS on other platforms.
prop_pbkdf2iters=Controls the number of PBKDF2 iterations that a passphrase encryption key should be run through when processing it into an encryption key.  This property is only defined when encryption is enabled and a keyformat of passphrase is selected. The goal of PBKDF2 is to significantly increase the computational difficulty needed to brute force a user's passphrase. This is accomplished by forcing the attacker to run each passphrase through a computationally expensive hashing function many times before they arrive at the resulting key. A user who actually knows the passphrase will only have to pay this cost once. As CPUs become better at processing, this number should be raised to ensure that a brute force attack is still not possible. The current default is 350000 and the minimum is 100000.  This property may be changed with zfs change-key. prop_recordsize=Specifies a suggested block size for files in the file system. This property is designed solely for use with  database  workloads  that access  files  in fixed-size records. ZFS automatically tunes block sizes according to internal algorithms optimized for typical access patterns. For databases that create very large files but access them in small random chunks, these algorithms may be suboptimal. Specifying a "recordsize" greater than or equal to the record size of the database can result in significant performance gains. Use of this property for general purpose file systems is strongly discouraged, and may adversely affect performance. The size specified must be a power of two greater than or equal to 512 and less than or equal to 128 Kbytes. Changing the file system\'\s recordsize only affects files created afterward; existing files are unaffected. This property can also be referred to by its shortened column name, "recsize".
prop_primarycache=Controls what is cached in the primary cache (ARC). If this property is set to all, then both user data and metadata is cached.  If this property is set to none, then neither user data nor metadata is cached. If this property is set to metadata, then only metadata is cached. The default value is all.
prop_readonly=Controls whether this dataset can be modified. The default value is "off".<br /> This property can also be referred to by its shortened column name, "rdonly".
prop_realtime=Controls the manner in which the access time is updated when atime=on is set. Turning this property on causes the access time to be updated relative to the modify or change time. Access time is only updated if the previous access time was earlier than the current modify or change time or if the existing access time hasn’t been updated within the past 24 hours. The default value is off.
prop_redundant_metadata=Controls what types of metadata are stored redundantly. ZFS stores an extra copy of metadata, so that if a single block is corrupted, the amount of user data lost is limited. This extra copy is in addition to any redundancy provided at the pool level (e.g. by mirroring or RAID-Z), and is in addition to an extra copy specified by the copies property (up to a total of 3 copies). For example if the pool is mirrored, copies=2, and redundant_metadata=most, then ZFS stores 6 copies of most metadata, and 4 copies of data and some metadata.<br /><br />When set to all, ZFS stores an extra copy of all metadata. If a single on-disk block is corrupt, at worst a single block of user data (which is recordsize bytes long) can be lost.<br /><br />When set to most, ZFS stores an extra copy of most types of metadata. This can improve performance of random writes, because less metadata must be written. In practice, at worst about 100 blocks (of recordsize bytes each) of user data can be lost if a single on-disk block is corrupt. The exact behavior of which metadata blocks are stored redundantly may change in future releases.<br /><br />The default value is all.
prop_refcompressratio=The compression ratio achieved for the referenced space of this dataset, expressed as a multiplier. See also the compressratio property.
prop_referenced=The amount of data that is accessible by this dataset, which may or may not be shared with other datasets in the pool.  When a snapshot or clone is created, it initially references the same amount of space as the file system or snapshot it was created from, since its contents are identical.<br /><br />This property can also be referred to by its shortened column name, refer.
prop_refquota=Limits the amount of space a dataset can consume. This property enforces a hard limit on the amount of space used. This hard limit does not include space used by descendents, including file systems and snapshots.
prop_refreservation=The minimum amount of space guaranteed to a dataset, not including its descendents. When the amount of space used is below this value, the dataset is treated as if it were taking up the amount of space specified by refreservation. The refreservation reservation is accounted for in the parent datasets' space used, and counts against the parent datasets' quotas and reservations.<br /><br />If refreservation is set, a snapshot is only allowed if there is enough free pool space outside of this reservation to accommodate the current number of "referenced" bytes in the dataset.<br /><br />If refreservation is set to auto, a volume is thick provisioned (or "not sparse"). refreservation=auto is only supported on volumes. See volsize in the Native Properties section for more information about sparse volumes.<br /><br />This property can also be referred to by its shortened column name, refreserv.
prop_reservation=The minimum amount of space guaranteed to a dataset and its descendants. When the amount of space used is below this value, the dataset is treated as if it were taking up the amount of space specified by its reservation. Reservations are accounted for in the parent datasets' space used, and count against the parent datasets' quotas and reservations.<br /><br />This property can also be referred to by its shortened column name, reserv.
prop_rootcontext=This flag sets the SELinux context for the root inode of the filesystem. See selinux(8) for more information.
prop_secondarycache=Controls what is cached in the secondary cache (L2ARC). If this property is set to "all", then both user data and metadata is cached. If this property is set to "none", then neither user data nor metadata is cached. If this property is set to "metadata", then only metadata is cached. The default value is "all".
prop_shareiscsi=Like the "sharenfs" property, "shareiscsi" indicates whether a ZFS volume is exported as an iSCSI target. The acceptable values for this property are "on", "off", and "type=disk". The default value is "off". In the future, other target types might be supported. For example, "tape".<br /><br />You might want to set "shareiscsi=on" for a file system so that all ZFS volumes within the file system are shared by default. Setting this property on a file system has no direct effect, however.
prop_sharenfs=Controls whether the file system is shared via NFS, and what options are to be used. A file system with a sharenfs property of off is managed with the exportfs(8) command and entries in the /etc/exports file. Otherwise, the file system is automatically shared and unshared with the zfs share and zfs unshare commands. If the property is set to on, the dataset is shared using the default options:<br /><br />sec=sys,rw,crossmnt,no_subtree_check<br /><br />See exports(5) for the meaning of the default options. Otherwise, the exportfs(8) command is invoked with options equivalent to the contents of this property.<br /><br />When the sharenfs property is changed for a dataset, the dataset and any children inheriting the property are re-shared with the new options, only if the property was previously off, or if they were shared before the property was changed.  If the new property is off, the file systems are unshared.
prop_sharesmb=Controls whether the file system is shared by using Samba USERSHARES and what options are to be used. Otherwise, the file system is automatically shared and unshared with the zfs share and zfs unshare commands. If the property is set to on, the net(8) command is invoked to create a USERSHARE.<br /><br />Because SMB shares requires a resource name, a unique resource name is constructed from the dataset name. The constructed name is a copy of the dataset name except that the characters in the dataset name, which would be invalid in the resource name, are replaced with underscore (_) characters. Linux does not currently support additional options which might be available on Solaris.<br /><br />If the sharesmb property is set to off, the file systems are unshared.<br /><br />The share is created with the ACL (Access Control List) "Everyone:F" ("F" stands for "full permissions", ie. read and write permissions) and no guest access (which means Samba must be able to authenticate a real user, system passwd/shadow, LDAP or smbpasswd based) by default. This means that any additional access control (disallow specific user specific access etc) must be done on the underlying file system.
prop_snapdir=Controls whether the .zfs directory is hidden or visible in the root of the file system as discussed in the Snapshots section of zfsconcepts(8).  The default value is hidden.
prop_snapdev=Controls whether the volume snapshot devices under /dev/zvol/<pool> are hidden or visible. The default value is hidden.
prop_snapshot_count=The total number of snapshots that exist under this location in the dataset tree.  This value is only available when a snapshot_limit has been set somewhere in the tree under which the dataset resides.
prop_snapshot_limit=Limits the number of snapshots that can be created on a dataset and its descendents.  Setting a snapshot_limit on a descendent of a dataset that already has a snapshot_limit does not override the ancestor's snapshot_limit, but rather imposes an additional limit.  The limit is not enforced if the user is allowed to change the limit. For example this means that recursive snapshots taken from the global zone are counted against each delegated dataset within a zone.  This feature must be enabled to be used (see zpool-features(5)).
prop_special_small_blocks=This value represents the threshold block size for including small file blocks into the special allocation class. Blocks smaller than or equal to this value will be assigned to the special allocation class while greater blocks will be assigned to the regular class. Valid values are zero or a power of two from 512B up to 1M. The default size is 0 which means no small file blocks will be allocated in the special class.<br /><br />Before setting this property, a special class vdev must be added to the pool. See zpool(8) for more details on the special allocation class.
prop_sync=Controls the behavior of synchronous requests (e.g. fsync, O_DSYNC). standard is the POSIX specified behavior of ensuring all synchronous requests are written to stable storage and all devices are flushed to ensure data is not cached by device controllers (this is the default). always causes every file system transaction to be written and flushed before its system call returns. This has a large performance penalty. disabled disables synchronous requests. File system transactions are only committed to stable storage periodically. This option will give the highest performance. However, it is very dangerous as ZFS would be ignoring the synchronous transaction demands of applications such as databases or NFS. Administrators should only use this option when the risks are understood.
prop_type=The type of dataset: filesystem, volume, snapshot, or bookmark.
prop_used=The amount of space consumed by this dataset and all its descendents. This is the value that is checked against this dataset's quota and reservation. The space used does not include this dataset's reservation, but does take into account the reservations of any descendent datasets. The amount of space that a dataset consumes from its parent, as well as the amount of space that is freed if this dataset is recursively destroyed, is the greater of its space used and its reservation.<br /><br />The used space of a snapshot (see the Snapshots section of zfsconcepts(8)) is space that is referenced exclusively by this snapshot. If this snapshot is destroyed, the amount of used space will be freed. Space that is shared by multiple snapshots isn't accounted for in this metric. When a snapshot is destroyed, space that was previously shared with this snapshot can become unique to snapshots adjacent to it, thus changing the used space of those snapshots. The used space of the latest snapshot can also be affected by changes in the file system. Note that the used space of a snapshot is a subset of the written space of the snapshot.<br /><br />The amount of space used, available, or referenced does not take into account pending changes. Pending changes are generally accounted for within a few seconds. Committing a change to a disk using fsync(2) or O_SYNC does not necessarily guarantee that the space usage information is updated immediately.
prop_usedbychildren=The amount of space used by children of this dataset, which would be freed if all the dataset's children were destroyed.
prop_usedbydataset=The amount of space used by this dataset itself, which would be freed if the dataset were destroyed (after first removing any refreservation and destroying any necessary snapshots or descendents).
prop_usedbysnapshots=The amount of space consumed by snapshots of this dataset. In particular, it is the amount of space that would be freed if all of this dataset's snapshots were destroyed. Note that this is not simply the sum of the snapshots' used properties because space can be shared by multiple snapshots.
prop_usedbyrefreservation=The amount of space used by a refreservation set on this dataset, which would be freed if the refreservation was removed.
prop_userrefs=This property is set to the number of user holds on this snapshot.  User holds are set by using the zfs hold command.
prop_utf8only=Indicates whether the file system should reject file names that include characters that are not present in the UTF-8 character code set. If this property is explicitly set to off, the normalization property must either not be explicitly set or be set to none. The default value for the utf8only property is off. This property cannot be changed after the file system is created
prop_quota=Limits the amount of space a dataset and its descendents can consume. This property enforces a hard limit on the amount of space used. This includes all space consumed by descendents, including file systems and snapshots. Setting a quota on a descendent of a dataset that already has a quota does not override the ancestor's quota, but rather imposes an additional limit. <br /><br />Quotas cannot be set on volumes, as the "volsize" property acts as an implicit quota.
prop_volblocksize=For volumes, specifies the block size of the volume. The blocksize cannot be changed once the volume has been written, so it should be set at volume creation time. The default blocksize for volumes is 8 Kbytes. Any power of 2 from 512 bytes to 128 Kbytes is valid.<br /><br />This property can also be referred to by its shortened column name, volblock.
prop_volmode=This property specifies how volumes should be exposed to the OS. Setting it to full exposes volumes as fully fledged block devices, providing maximal functionality. The value geom is just an alias for full and is kept for compatibility.  Setting it to dev hides its partitions.  Volumes with property set to none are not exposed outside ZFS, but can be snapshotted, cloned, replicated, etc, that can be suitable for backup purposes.  Value default means that volumes exposition is controlled by system-wide tunable zvol_volmode, where full, dev and none are encoded as 1, 2 and 3 respectively.  The default value is full.
prop_volsize=For volumes, specifies the logical size of the volume. By default, creating a volume establishes a reservation of equal size. For storage pools with a version number of 9 or higher, a refreservation is set instead. Any changes to volsize are reflected in an equivalent change to the reservation (or refreservation). The volsize can only be set to a multiple of volblocksize, and cannot be zero.<br /><br />The reservation is kept equal to the volume's logical size to prevent unexpected behavior for consumers. Without the reservation, the volume could run out of space, resulting in undefined behavior or data corruption, depending on how the volume is used. These effects can also occur when the volume size is changed while it is in use (particularly when shrinking the size). Extreme care should be used when adjusting the volume size.<br /><br />Though not recommended, a "sparse volume" (also known as "thin provisioned") can be created by specifying the -s option to the zfs create -V command, or by changing the value of the refreservation property (or reservation property on pool version 8 or earlier) after the volume has been created. A "sparse volume" is a volume where the value of refreservation is less than the size of the volume plus the space required to store its metadata. Consequently, writes to a sparse volume can fail with ENOSPC when the pool is low on space. For a sparse volume, changes to volsize are not reflected in the refreservation. A volume that is not sparse is said to be "thick provisioned". A sparse volume can become thick provisioned by setting refreservation to auto.
prop_written=The amount of referenced space written to this dataset since the previous snapshot.
prop_xattr=Controls whether extended attributes are enabled for this file system. The default value is on.
prop_zoned=Controls whether the dataset is managed from a non-global zone. Zones are a Solaris feature and are not relevant on other platforms. The default value is off.<br /><br />The following three properties cannot be changed after the file system is created, and therefore, should be set when the file system is created. If the properties are not set with the zfs create or zpool create commands, these properties are inherited from the parent dataset.  If the parent dataset lacks these properties due to having been created prior to these features being supported, the new file system will have the default values for these properties.

#zpool property descriptions
prop_allocated=Amount of storage space within the pool that has been physically allocated.
prop_altroot=Alternate root directory. If set, this directory is prepended to any mount points within the pool. This can be used when examining an unknown pool where the mount points cannot be trusted, or in an alternate boot environment, where the typical paths are not valid. altroot is not a persistent property. It is valid only while the system is up. Setting altroot defaults to using cachefile=none, though this may be overridden using an explicit setting.
prop_ashift=Pool sector size exponent, to the power of 2 (internally referred to as "ashift"). I/O operations will be aligned to the specified size boundaries. Additionally, the minimum (disk) write size will be set to the specified size, so this represents a space vs. performance trade-off. The typical case for setting this property is when performance is important and the underlying disks use 4KiB sectors but report 512B sectors to the OS (for compatibility reasons); in that case, set ashift=12 (which is 1<<12 = 4096). For optimal performance, the pool sector size should be greater than or equal to the sector size of the underlying disks. Since the property cannot be changed after pool creation, if in a given pool, you ever want to use drives that report 4KiB sectors, you must set ashift=12 at pool creation time.
prop_autoexpand=Controls automatic pool expansion when the underlying LUN is grown. If set to "on", the pool will be resized according to the size of the expanded device. If the device is part of a mirror or raidz then all devices within that mirror/raidz group must be expanded before the new space is made available to the pool. The default behavior is "off". This property can also be referred to by its shortened column name, expand.
prop_autoreplace=Controls automatic device replacement. If set to "off", device replacement must be initiated by the administrator by using the "zpool replace" command. If set to "on", any new device, found in the same physical location as a device that previously belonged to the pool, is automatically formatted and replaced. The default behavior is "off". This property can also be referred to by its shortened column name, "replace".
prop_autotrim=When set to on space which has been recently freed, and is no longer allocated by the pool, will be periodically trimmed.  This allows block device vdevs which support BLKDISCARD, such as SSDs, or file vdevs on which the underlying file system supports hole-punching, to reclaim unused blocks.  The default setting for this property is off.<br /> Automatic TRIM does not immediately reclaim blocks after a free. Instead, it will optimistically delay allowing smaller ranges to be aggregated in to a few larger ones.  These can then be issued more efficiently to the storage.  TRIM on L2ARC devices is enabled by setting l2arc_trim_ahead > 0.<br /> Be aware that automatic trimming of recently freed data blocks can put significant stress on the underlying storage devices.  This will vary depending of how well the specific device handles these commands.  For lower end devices it is often possible to achieve most of the benefits of automatic trimming by running an on-demand (manual) TRIM periodically using the zpool trim command.
prop_bootfs=Identifies the default bootable dataset for the root pool. This property is expected to be set mainly by the installation and upgrade programs.
prop_cachefile=Controls the location of where the pool configuration is cached. Discovering all pools on system startup requires a cached copy of the configuration data that is stored on the root file system. All pools in this cache are automatically imported when the system boots. Some environments, such as install and clustering, need to cache this information in a different location so that pools are not automatically imported. Setting this property caches the pool configuration in a different location that can later be imported with "zpool import -c". Setting it to the special value "none" creates a temporary pool that is never cached, and the special value '' (empty string) uses the default location.
prop_capacity=Percentage of pool space used. This property can also be referred to by its shortened column name, "cap".
#prop_checkpoint=
prop_comment=A text string consisting of printable ASCII characters that will be stored such that it is available even if the pool becomes faulted. An administrator can provide additional information about a pool using this property.
prop_dedupratio=The deduplication ratio specified for a pool, expressed as a multiplier.  For example, a dedupratio value of 1.76 indicates that 1.76 units of data were stored but only 1 unit of disk space was actually consumed. See zfs(8) for a description of the deduplication feature.
prop_delegation=Controls whether a non-privileged user is granted access based on the dataset permissions defined on the dataset. See zfs(8) for more information on ZFS delegated administration.
prop_expandsize=Amount of uninitialized space within the pool or device that can be used to increase the  total  capacity  of  the pool.   Uninitialized  space  consists of any space on an EFI labeled vdev which has not been brought online (i.e. zpool online -e).  This space occurs when a LUN is dynamically expanded.
prop_failmode=Controls the system behavior in the event of catastrophic pool failure. This condition is typically a result of a loss of connectivity to the underlying storage device(s) or a failure of all devices within the pool. The behavior of such an event is determined as follows:<br /> <b>wait</b>      Blocks all I/O access until the device connectivity is recovered and the errors are cleared.  This is the default behavior.<br /><b>continue</b>  Returns EIO to any new write I/O requests but allows reads to any of the remaining healthy devices.  Any write requests that have yet to be committed to disk would be blocked.<br /><b>panic</b>     Prints out a message to the console and generates a system crash dump.
prop_feature@allocation_classes=GUID org.zfsonlinux:allocation_classes<br />READ-ONLY COMPATIBLE yes<br />DEPENDENCIES none<br /><br />This feature enables support for separate allocation classes.<br /><br />This feature becomes active when a dedicated allocation class vdev (dedup or special) is created with the zpool create or zpool add subcommands. With device removal, it can be returned to the enabled state if all the dedicated allocation class vdevs are removed.
prop_feature@large_dnode=GUID org.zfsonlinux:large_dnode<br />READ-ONLY COMPATIBLE no<br />DEPENDENCIES extensible_dataset<br /><br />The large_dnode feature allows the size of dnodes in a dataset to be set larger than 512B.<br /><br />This feature becomes active once a dataset contains an object with a dnode larger than 512B, which occurs as a result of setting the dnodesize dataset property to a value other than legacy. The feature will return to being enabled once all filesystems that have ever contained a dnode larger than 512B are destroyed. Large dnodes allow more data to be stored in the bonus buffer, thus potentially improving performance by avoiding the use of spill blocks.
prop_feature@livelist=GUID com.delphix:livelist<br />READ-ONLY COMPATIBLE yes<br />DEPENDENCIES  none<br />This feature allows clones to be deleted faster than the traditional method when a large number of random/sparse writes have been made to the clone.  All blocks allocated and freed after a clone is created are tracked by the the clone's livelist which is referenced during the deletion of the clone.  The feature is activated when a clone is created and remains active until all clones have been destroyed.
prop_feature@log_spacemap=GUID com.delphix:log_spacemap<br />READ-ONLY COMPATIBLE yes<br />DEPENDENCIES com.delphix:spacemap_v2<br /><br />This feature improves performance for heavily-fragmented pools, especially when workloads are heavy in random-writes. It does so by logging all the metaslab changes on a single spacemap every TXG instead of scattering multiple writes to all the metaslab spacemaps.<br /><br />This feature becomes active as soon as it is enabled and will never return to being enabled.
prop_feature@project_quota=GUID org.zfsonlinux:project_quota<br />READ-ONLY COMPATIBLE yes<br />DEPENDENCIES extensible_dataset<br /><br />This feature allows administrators to account the spaces and objects usage information against the project identifier (ID).<br /><br />The project ID is new object-based attribute. When upgrading an existing filesystem, object without project ID attribute will be assigned a zero project ID. After this feature is enabled> parent  inherit flag is set (via chattr +/-P or zfs project [-s|-C]). Otherwise, the new object's project ID will be set as zero. An object's project ID can be changed at anytime by the owner (or privileged user) via chattr -p $prjid or zfs project -p $prjid.<br /><br /> This feature will become active as soon as it is enabled and will never return to being disabled. Each filesystem will  be  upgraded automatically when remounted or when new file is created under that filesystem. The upgrade can also be triggered on filesystems via `zfs set version=current <pool/fs>`.  The upgrade process runs in the background and may take a while to complete for  the  filesystems containing a large number of files.
prop_feature@redaction_bookmarks=GUID com.delphix:redaction_bookmarks<br />READ-ONLY COMPATIBLE no<br />DEPENDENCIES bookmarks, extensible_dataset<br /><br />This feature enables the use of the redacted zfs send. Redacted zfs send creates redaction bookmarks, which store the list of blocks redacted by the send that created them. For more information about redacted send, see zfs(8).
prop_fragmentation=The amount of fragmentation in the pool.
prop_free=Number of blocks within the pool that are not allocated.
prop_freeing=After a file system or snapshot is destroyed, the space it was using is returned to the pool asynchronously. freeing is the amount of space remaining to be reclaimed. Over time freeing will decrease while free increases.\
prop_health=The current health of the pool. Health can be "ONLINE", "DEGRADED", "FAULTED", "OFFLINE", "REMOVED", or "UNAVAIL".
#prop_leaked=
prop_listsnapshots=Controls whether information about snapshots associated with this pool is output when "zfs list" is run without the -t option. The default value is off.
prop_load_guid=A unique identifier for the pool.  Unlike the guid property, this identifier is generated every time we load the pool (e.g. does not persist across imports/exports) and never changes while the pool is loaded (even if a reguid operation takes place).
prop_multihost=Controls whether a pool activity check should be performed during zpool import.  When a pool is determined to be active it cannot be imported, even with the -f option.  This property is intended to be used in failover configurations where multiple hosts have access to a pool on shared storage.<br /> Multihost provides protection on import only.  It does not protect against an individual device being used in multiple pools, regardless of the type of vdev.  See the discussion under zpool create.<br /> When this property is on, periodic writes to storage occur to show the pool is in use.  See zfs_multihost_interval in the zfs-module-parameters(5) man page.  In order to enable this property each host must set a unique hostid.  See genhostid(1) zgenhostid(8) spl-module-parameters(5) for additional details.  The default value is off.
prop_size=Total size of the storage pool.
prop_version=The current on-disk version of the pool. This can be increased, but never decreased. The preferred method of updating pools is with the zpool upgrade command, though this property can be used when a specific version is needed for backwards compatibility. Once feature flags are enabled on a pool this property will no longer have a value.


#snapshot property descriptiosn
prop_defer_destroy=This property is on if the snapshot has been marked for deferred destroy by using the zfs destroy -d command. Otherwise, the property is off.
prop_origin=For cloned file systems or volumes, the snapshot from which the clone was created. See also the clones property.
